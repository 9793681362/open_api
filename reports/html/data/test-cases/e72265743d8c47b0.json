{"uid":"e72265743d8c47b0","name":"test_payment_exception[caseinfo3]","fullName":"test_project.finance.TestFinance#test_payment_exception","historyId":"df05091c187fb16ffa99b3d1d3fde9f9","time":{"start":1683598794784,"stop":1683598794784,"duration":0},"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?","statusTrace":"self = <test_project.finance.TestFinance object at 0x000001638475FD90>\ncaseinfo = {'new_income_flow': {'case_id': 'API004', 'data': 'None', 'expected_result': 'None', 'is_positive': 'None', ...}, 'payment_exception': {'case_id': 'API004', 'data': 'None', 'expected_result': 'None', 'is_positive': 'None', ...}}\n\n    @pytest.mark.parametrize('caseinfo',YamlUtil('./Conf/yaml/finance.yaml').read_yaml_excel('./api_test_case/finance.xlsx','payment_exception'))\n    def test_payment_exception(self,caseinfo):\n        case_id = caseinfo['payment_exception']['case_id']\n        url = caseinfo['payment_exception']['url']\n        data = caseinfo['payment_exception']['data']\n        is_positive = caseinfo['payment_exception']['is_positive']\n        request_type = caseinfo['payment_exception']['request_type']\n        expected_result = caseinfo['payment_exception']['expected_result']\n        status_code = caseinfo['payment_exception']['status_code']\n        for i in [url]:\n            logging.info('CASE_ID：'.format(case_id))\n>           response = RestClient().post(url,data=data)\n\ntest_project\\finance.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\rest_client.py:18: in post\n    return self.request(url, \"POST\", data, json, **kwargs,headers=self.token)\ncommon\\rest_client.py:28: in request\n    return requests.post(url, data, json, **kwargs)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\sessions.py:528: in request\n    prep = self.prepare_request(req)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\sessions.py:456: in prepare_request\n    p.prepare(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\models.py:316: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [POST]>, url = 'None', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\models.py:390: MissingSchema","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"test_project"},{"name":"suite","value":"finance"},{"name":"subSuite","value":"TestFinance"},{"name":"host","value":"DESKTOP-MMPUN61"},{"name":"thread","value":"34940-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_project.finance"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"{'new_income_flow': {'case_id': 'API004', 'title': '付款异常', 'url': 'None', 'data': 'None', 'is_positive': 'None', 'request_type': 'None', 'expected_result': 'None', 'status_code': 'None'}, 'payment_exception': {'case_id': 'API004', 'title': '付款异常', 'url': 'None', 'data': 'None', 'is_positive': 'None', 'request_type': 'None', 'expected_result': 'None', 'status_code': 'None'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e72265743d8c47b0.json","parameterValues":["{'new_income_flow': {'case_id': 'API004', 'title': '付款异常', 'url': 'None', 'data': 'None', 'is_positive': 'None', 'request_type': 'None', 'expected_result': 'None', 'status_code': 'None'}, 'payment_exception': {'case_id': 'API004', 'title': '付款异常', 'url': 'None', 'data': 'None', 'is_positive': 'None', 'request_type': 'None', 'expected_result': 'None', 'status_code': 'None'}}"]}