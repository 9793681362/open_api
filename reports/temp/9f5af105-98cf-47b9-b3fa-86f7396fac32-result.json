{"name": "test_payment_exception[caseinfo0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert (True, '') == True\n +  where (True, '') = <bound method ApiAssertion.assert_status_code of <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10>>(<Response [200]>, 200)\n +    where <bound method ApiAssertion.assert_status_code of <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10>> = <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10>.assert_status_code\n +      where <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10> = ApiAssertion('')", "trace": "self = <test_project.finance.TestFinance object at 0x00000221B5002090>\ncaseinfo = {'new_income_flow': {'case_id': 'API001', 'data': {'comment': '1', 'content': '设计服务', 'invoice_id': '554', 'invoice_st...content': '设计服务', 'invoice_id': '554', 'invoice_state': 0, ...}, 'expected_result': 'None', 'field_name': 'None', ...}}\n\n    @pytest.mark.parametrize('caseinfo',YamlUtil('./Conf/yaml/finance.yaml').read_yaml_excel('./api_test_case/finance.xlsx','payment_exception'))\n    def test_payment_exception(self,caseinfo):\n        global response\n        case_id = caseinfo['payment_exception']['case_id']\n        url = caseinfo['payment_exception']['url']\n        data = caseinfo['payment_exception']['data']\n        is_positive = caseinfo['payment_exception']['is_positive']\n        request_type = caseinfo['payment_exception']['request_type']\n        expected_result = caseinfo['payment_exception']['expected_result']\n        status_code = caseinfo['payment_exception']['status_code']\n        field_name = caseinfo['payment_exception']['field_name']\n        for i in [url]:\n            log.info('用例ID：{}'.format(case_id))\n            if request_type == \"POST\":\n                response = RestClient().post(url, data=data)\n            elif request_type == \"PUT\":\n                response = RestClient().put(url, data=data)\n>           assert  ApiAssertion('').assert_status_code(response,status_code) == True\nE           AssertionError: assert (True, '') == True\nE            +  where (True, '') = <bound method ApiAssertion.assert_status_code of <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10>>(<Response [200]>, 200)\nE            +    where <bound method ApiAssertion.assert_status_code of <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10>> = <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10>.assert_status_code\nE            +      where <common.assertion_utils.ApiAssertion object at 0x00000221B5003F10> = ApiAssertion('')\n\ntest_project\\finance.py:40: AssertionError"}, "attachments": [{"name": "log", "source": "8026a466-98be-421f-a75b-18ae11ac2d13-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'new_income_flow': {'case_id': 'API001', 'title': '付款异常', 'url': 'https://open-t.handyprint.cn/api/invoices/state', 'data': {'invoice_id': '554', 'invoice_state': 0, 'vendor_name': '抟力数智（宁波）科技有限公司', 'tax_rate': '1', 'content': '设计服务', 'comment': '1'}, 'is_positive': 'front', 'request_type': 'PUT', 'expected_result': 'None', 'status_code': 200}, 'payment_exception': {'case_id': 'API001', 'title': '付款异常', 'url': 'https://open-t.handyprint.cn/api/invoices/state', 'data': {'invoice_id': '554', 'invoice_state': 0, 'vendor_name': '抟力数智（宁波）科技有限公司', 'tax_rate': '1', 'content': '设计服务', 'comment': '1'}, 'is_positive': 'front', 'request_type': 'PUT', 'expected_result': 'None', 'status_code': 200, 'field_name': 'None'}}"}], "start": 1683620333675, "stop": 1683620334353, "uuid": "8efa5a0e-9a66-4d1d-946f-d4ab922436ef", "historyId": "89be1f884d039883296a87c0219e3207", "testCaseId": "e6d80fd88f8a8bf972fb3cb67578d144", "fullName": "test_project.finance.TestFinance#test_payment_exception", "labels": [{"name": "parentSuite", "value": "test_project"}, {"name": "suite", "value": "finance"}, {"name": "subSuite", "value": "TestFinance"}, {"name": "host", "value": "DESKTOP-MMPUN61"}, {"name": "thread", "value": "33852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_project.finance"}]}