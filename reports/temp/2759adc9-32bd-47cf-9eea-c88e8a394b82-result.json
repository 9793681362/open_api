{"name": "test_all_cases[caseinfo3]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_project.test_case_execution.TestAllCases object at 0x0000024D4E9B0F90>\ncaseinfo = {'payment_exception': {'case_id': 'API004', 'data': {'bill_state': '-1', 'invoice_title': '0', 'limit': '20', 'page': '1'}, 'expected_result': 'bill_failed_info', 'field_name': 'None', ...}}\n\n    @pytest.mark.parametrize('caseinfo',YamlUtil('./Conf/yaml/test.yaml').read_yaml_excel('./api_test_case/test.xlsx','test_case'))\n    # @pytest.mark.skipif(api_case_id)\n    def test_all_cases(self,caseinfo):\n        global response\n        case_id = caseinfo['payment_exception']['case_id']\n        for i in [case_id]:\n            if self.api_case_id == i:\n                log.info('执行的用例ID：{}'.format(case_id))\n                url = caseinfo['payment_exception']['url']\n                data = caseinfo['payment_exception']['data']\n                is_positive = caseinfo['payment_exception']['is_positive']\n                request_type = caseinfo['payment_exception']['request_type']\n                expected_result = caseinfo['payment_exception']['expected_result']\n                status_code = caseinfo['payment_exception']['status_code']\n                field_name = caseinfo['payment_exception']['field_name']\n                if request_type == \"POST\":\n                    response = RestClient().post(url, data=data)\n                elif request_type == \"PUT\":\n                    response = RestClient().put(url, data=data)\n                elif request_type == \"GET\":\n                    response = RestClient().get(url,params=data)\n>                   print(response.json())\n\ntest_project\\test_case_execution.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000024D4AE04E10>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.20.1</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "f0665e62-e099-4a95-a93e-c51c9d361468-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'payment_exception': {'case_id': 'API004', 'title': '付款异常', 'url': 'https://open-t.handyprint.cn/api/bill/payables', 'data': {'page': '1', 'limit': '20', 'bill_state': '-1', 'invoice_title': '0'}, 'is_positive': 'None', 'request_type': 'GET', 'expected_result': 'bill_failed_info', 'status_code': 200, 'field_name': 'None'}}"}], "start": 1683702013245, "stop": 1683702013355, "uuid": "46d2d2da-ba46-4fdf-874a-c954ec7c52cc", "historyId": "b2d3db30fb47cd12d03a9ec03a24545c", "testCaseId": "14a76cc02fee742180839c4c8e468b41", "fullName": "test_project.test_case_execution.TestAllCases#test_all_cases", "labels": [{"name": "parentSuite", "value": "test_project"}, {"name": "suite", "value": "test_case_execution"}, {"name": "subSuite", "value": "TestAllCases"}, {"name": "host", "value": "DESKTOP-MMPUN61"}, {"name": "thread", "value": "8556-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_project.test_case_execution"}]}